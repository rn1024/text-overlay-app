# Git 工作流规范

## 分支管理
1. **主分支**: `main` - 生产环境代码
2. **开发分支**: `develop` - 开发环境代码
3. **功能分支**: `feature/功能名称` - 新功能开发
4. **修复分支**: `hotfix/问题描述` - 紧急修复
5. **发布分支**: `release/版本号` - 发布准备

## 提交信息规范
使用约定式提交格式：
```
<类型>[可选的作用域]: <描述>

[可选的正文]

[可选的脚注]
```

### 提交类型
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码格式调整（不影响功能）
- `refactor`: 代码重构
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动
- `ci`: CI/CD相关

### 提交示例
```
feat(renderer): 添加图片预览功能

- 实现图片拖拽上传
- 添加图片缩放功能
- 优化渲染性能

Closes #123
```

## 开发流程
1. 从 `develop` 分支创建功能分支
2. 在功能分支上开发
3. 提交前运行 `pnpm run build` 确保构建成功
4. 创建 Pull Request 到 `develop` 分支
5. 代码审查通过后合并
6. 定期从 `develop` 合并到 `main`

## 文件管理
### 必须提交的文件
- 源代码文件
- 配置文件
- `pnpm-lock.yaml`
- 文档文件

### 不要提交的文件
- `node_modules/`
- `dist/`
- `release/`
- 临时文件
- IDE配置文件（除非团队共用）

## 代码审查要点
1. 代码符合项目规范
2. TypeScript类型定义完整
3. 组件结构合理
4. 安全性检查（特别是Electron相关）
5. 性能影响评估
description:
globs:
alwaysApply: false
---
