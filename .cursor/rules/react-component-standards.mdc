# React 组件开发规范

## 组件结构规范
1. 组件文件使用 PascalCase 命名（如 `MainContent.tsx`）
2. 组件目录: `src/renderer/components/`
3. 自定义Hooks目录: `src/renderer/hooks/`
4. 样式文件目录: `src/renderer/styles/`

## 组件编写规范
1. 使用函数组件 + Hooks
2. 组件必须有明确的 Props 类型定义
3. 使用 React.FC 类型或函数声明
4. 组件内部逻辑按以下顺序组织：
   - Props 解构
   - Hooks 调用
   - 事件处理函数
   - 渲染逻辑

## 状态管理规范
- 全局状态: 使用 [src/renderer/hooks/useAppStore.tsx](mdc:src/renderer/hooks/useAppStore.tsx)
- 本地状态: 使用 `useState`
- 副作用: 使用 `useEffect`
- 性能优化: 使用 `useCallback`, `useMemo`

## Ant Design 使用规范
1. 优先使用 Ant Design 组件
2. 主题配置在 [src/renderer/App.tsx](mdc:src/renderer/App.tsx) 中统一管理
3. 支持深色/浅色主题切换
4. 自定义样式使用 CSS-in-JS 或独立的 CSS 文件

## 示例组件结构
```tsx
import React, { useState, useCallback } from 'react';
import { Button, Card, Space } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import { useAppStore } from '../hooks/useAppStore';

interface ComponentNameProps {
  title: string;
  onAction?: (action: string) => void;
}

const ComponentName: React.FC<ComponentNameProps> = ({ 
  title, 
  onAction 
}) => {
  const { state, addData } = useAppStore();
  const [loading, setLoading] = useState(false);

  const handleClick = useCallback(() => {
    setLoading(true);
    // 处理逻辑
    onAction?.('clicked');
    setLoading(false);
  }, [onAction]);

  return (
    <Card title={title}>
      <Space>
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          loading={loading}
          onClick={handleClick}
        >
          操作按钮
        </Button>
      </Space>
    </Card>
  );
};

export default ComponentName;
```
description:
globs:
alwaysApply: false
---
