# 代码质量规范

## 代码风格
1. 使用 2 空格缩进
2. 字符串优先使用单引号
3. 语句结尾必须使用分号
4. 对象和数组最后一个元素后加逗号
5. 行长度不超过 100 字符

## 命名规范
- **文件名**: kebab-case（如 `user-profile.tsx`）
- **组件名**: PascalCase（如 `UserProfile`）
- **变量名**: camelCase（如 `userName`）
- **常量名**: UPPER_SNAKE_CASE（如 `API_BASE_URL`）
- **接口名**: PascalCase + I前缀（如 `IUserData`）

## 错误处理
1. 所有异步操作必须有错误处理
2. 使用 try-catch 包装可能出错的代码
3. 错误信息要有意义，便于调试
4. 关键操作要有用户友好的错误提示

## 性能优化
1. 使用 `useCallback` 和 `useMemo` 优化组件性能
2. 避免在渲染函数中创建新对象
3. 合理使用 React.memo 包装组件
4. 图片资源要有合适的尺寸和格式

## 注释规范
1. 复杂逻辑必须添加注释
2. 函数和类要有 JSDoc 注释
3. TODO 注释要有负责人和时间
4. 注释要与代码保持同步

## 安全规范
1. 不在代码中硬编码敏感信息
2. 用户输入必须验证和清理
3. 文件路径操作要防止路径遍历
4. IPC通信要验证数据格式

## 示例：良好的代码风格
```typescript
/**
 * 用户数据处理工具类
 * @author 开发者姓名
 * @since 2024-01-01
 */
interface IUserData {
  id: string;
  name: string;
  email: string;
}

const UserService = {
  /**
   * 获取用户信息
   * @param userId 用户ID
   * @returns 用户数据或null
   */
  async getUserById(userId: string): Promise<IUserData | null> {
    try {
      const response = await fetch(`/api/users/${userId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('获取用户信息失败:', error);
      return null;
    }
  },
};
description:
globs:
alwaysApply: false
---
